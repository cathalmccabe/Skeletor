//-----------------------------------------------------
// Project Name : a.out

//***Headers***
//***Module***
module main #(
        parameter integer AddrSize = 1,
        parameter integer BITS_REGFILE = 1
    )
    (
        input  rst_i ,
        input  clk_i 
    );

//***Interal logic generated by compiler***  
    wire wreg_U3_U5; // wiring between wreg_o of module U3 and wreg_i of module U5
    wire m2reg_U4_U3; // wiring between m2reg_o of module U4 and m2reg_i of module U3
    wire wreg_U4_U3; // wiring between wreg_o of module U4 and wreg_i of module U3
    wire m2reg_U3_U5; // wiring between m2reg_o of module U3 and m2reg_i of module U5
    wire wmem_U4_U3; // wiring between wmem_o of module U4 and wmem_i of module U3
    wire [BITS_REGFILE : 0] destination_U4_U3; // wiring between destination_o of module U4 and destination_i of module U3
    wire [AddrSize - 1 : 0] aluresult_U4_U3; // wiring between aluresult_o of module U4 and aluresult_i of module U3
    wire [AddrSize - 1 : 0] op2_U4_U3; // wiring between op2_o of module U4 and op2_i of module U3
    wire [AddrSize - 1 : 0] datareg_U5_U2; // wiring between datareg_o of module U5 and datareg_i of module U2
    wire [AddrSize - 1 : 0] instruction_U1_U2; // wiring between instruction_o of module U1 and instruction_i of module U2
    wire [AddrSize - 1 : 0] op1_U2_U4; // wiring between op1_o of module U2 and op1_i of module U4
    wire [AddrSize - 1 : 0] op2_U2_U4; // wiring between op2_o of module U2 and op2_i of module U4
    wire [AddrSize - 1 : 0] extendedimm_U2_U4; // wiring between extendedimm_o of module U2 and extendedimm_i of module U4
    wire [AddrSize - 1 : 0] dmemout_U3_U5; // wiring between dmemout_o of module U3 and dmemout_i of module U5
    wire [BITS_REGFILE : 0] destination_U3_U5; // wiring between destination_o of module U3 and destination_i of module U5
    wire [AddrSize - 1 : 0] aluresult_U3_U5; // wiring between aluresult_o of module U3 and aluresult_i of module U5
    wire wreg_U5_U2; // wiring between wreg_o of module U5 and wreg_i of module U2
    wire [BITS_REGFILE : 0] destination_U5_U2; // wiring between destination_o of module U5 and destination_i of module U2
    wire nextpc_U1_U1; // wiring between nextpc_o of module U1 and pc_i of module U1
    wire aluc_U2_U4; // wiring between aluc_o of module U2 and aluc_i of module U4
    wire aluimm_U2_U4; // wiring between aluimm_o of module U2 and aluimm_i of module U4
    wire wreg_U2_U4; // wiring between wreg_o of module U2 and wreg_i of module U4
    wire wmem_U2_U4; // wiring between wmem_o of module U2 and wmem_i of module U4
    wire [BITS_REGFILE : 0] destination_U2_U4; // wiring between destination_o of module U2 and destination_i of module U4
    wire m2reg_U2_U4; // wiring between m2reg_o of module U2 and m2reg_i of module U4

    fetch #(
        .AddrSize (1)
    )
    inst_U1(
        .clk_i                  (clk_i ),
        .rst_i                  (rst_i ),
        .pc_i                   (nextpc_U1_U1),
        .nextpc_o               (nextpc_U1_U1),
        .instruction_o          (instruction_U1_U2)
    );

    decode #(
        .AddrSize (1),
        .BITS_REGFILE (1)
    )
    inst_U2(
        .clk_i                  (clk_i ),
        .rst_i                  (rst_i ),
        .instruction_i          (instruction_U1_U2),
        .destination_i          (destination_U5_U2),
        .datareg_i              (datareg_U5_U2),
        .wreg_i                 (wreg_U5_U2),
        .wreg_o                 (wreg_U2_U4),
        .m2reg_o                (m2reg_U2_U4),
        .wmem_o                 (wmem_U2_U4),
        .aluc_o                 (aluc_U2_U4),
        .aluimm_o               (aluimm_U2_U4),
        .destination_o          (destination_U2_U4),
        .op1_o                  (op1_U2_U4),
        .op2_o                  (op2_U2_U4),
        .extendedimm_o          (extendedimm_U2_U4)
    );

    memory #(
        .AddrSize (1),
        .BITS_REGFILE (1)
    )
    inst_U3(
        .clk_i                  (clk_i ),
        .rst_i                  (rst_i ),
        .wreg_i                 (wreg_U4_U3),
        .m2reg_i                (m2reg_U4_U3),
        .wmem_i                 (wmem_U4_U3),
        .destination_i          (destination_U4_U3),
        .aluresult_i            (aluresult_U4_U3),
        .op2_i                  (op2_U4_U3),
        .wreg_o                 (wreg_U3_U5),
        .m2reg_o                (m2reg_U3_U5),
        .destination_o          (destination_U3_U5),
        .aluresult_o            (aluresult_U3_U5),
        .dmemout_o              (dmemout_U3_U5)
    );

    writeback #(
        .AddrSize (1),
        .BITS_REGFILE (1)
    )
    inst_U5(
        .clk_i                  (clk_i ),
        .rst_i                  (rst_i ),
        .wreg_i                 (wreg_U3_U5),
        .m2reg_i                (m2reg_U3_U5),
        .aluresult_i            (aluresult_U3_U5),
        .dmemout_i              (dmemout_U3_U5),
        .destination_i          (destination_U3_U5),
        .wreg_o                 (wreg_U5_U2),
        .destination_o          (destination_U5_U2),
        .datareg_o              (datareg_U5_U2)
    );

    execute #(
        .AddrSize (1),
        .BITS_REGFILE (1)
    )
    inst_U4(
        .clk_i                  (clk_i ),
        .rst_i                  (rst_i ),
        .wreg_i                 (wreg_U2_U4),
        .m2reg_i                (m2reg_U2_U4),
        .wmem_i                 (wmem_U2_U4),
        .aluc_i                 (aluc_U2_U4),
        .aluimm_i               (aluimm_U2_U4),
        .destination_i          (destination_U2_U4),
        .op1_i                  (op1_U2_U4),
        .op2_i                  (op2_U2_U4),
        .extendedimm_i          (extendedimm_U2_U4),
        .wreg_o                 (wreg_U4_U3),
        .m2reg_o                (m2reg_U4_U3),
        .wmem_o                 (wmem_U4_U3),
        .destination_o          (destination_U4_U3),
        .aluresult_o            (aluresult_U4_U3),
        .op2_o                  (op2_U4_U3)
    );


//***Handcrafted Internal logic*** 
//TODO
endmodule
